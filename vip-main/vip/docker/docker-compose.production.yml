version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: vip_postgres
    environment:
      POSTGRES_DB: vip_applications
      POSTGRES_USER: vip_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vip_user -d vip_applications"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: vip_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Основное веб-приложение
  web:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    image: vip-main-web:production
    container_name: vip_web
    ports:
      - "5000:5000"
    volumes:
      - ../logs:/app/logs
      - ../app/static/uploads:/app/app/static/uploads
    environment:
      - FLASK_APP=wsgi.py
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://vip_user:${POSTGRES_PASSWORD}@postgres:5432/vip_applications
      - CACHE_REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram бот
  telegram-bot:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    image: vip-main-telegram:production
    container_name: vip_telegram_bot
    command: python telegram_bot.py
    volumes:
      - ../logs:/app/logs
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://vip_user:${POSTGRES_PASSWORD}@postgres:5432/vip_applications
      - CACHE_REDIS_URL=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx для обратного прокси
  nginx:
    image: nginx:alpine
    container_name: vip_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ../logs/nginx:/var/log/nginx
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: 