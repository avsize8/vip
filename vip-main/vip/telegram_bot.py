import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv
import logging
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
if not ADMIN_CHAT_ID:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ!")

logger.info(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ç–æ–∫–µ–Ω–æ–º: {TOKEN[:5]}...")

class TelegramBotHelper:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if str(update.effective_chat.id) != ADMIN_CHAT_ID:
            await update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
            return
        
        keyboard = [
            [InlineKeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data='new')],
            [InlineKeyboardButton("üìä –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data='all')],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            'ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        if str(update.effective_chat.id) != ADMIN_CHAT_ID:
            await update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
            return
        
        help_text = """
ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
/new - –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
/all - –í—Å–µ –∑–∞—è–≤–∫–∏

üìù <b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        """
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        if str(update.effective_chat.id) != ADMIN_CHAT_ID:
            await update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
            return
        
        try:
            from app import create_app
            from app.models import get_application_stats
            
            app = create_app()
            with app.app_context():
                stats = get_application_stats()
                
                stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:</b>

üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}
üÜï –ù–æ–≤—ã—Ö: {stats['new']}
‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {stats['processed']}
‚è≥ –í —Ä–∞–±–æ—Ç–µ: {stats['pending']}

üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
                """
                await update.message.reply_text(stats_text, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    
    async def list_applications(self, update: Update, context: ContextTypes.DEFAULT_TYPE, status=None) -> None:
        """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            from app import create_app
            from app.models import Application
            
            app = create_app()
            with app.app_context():
                if status:
                    applications = Application.query.filter_by(status=status).order_by(Application.created_at.desc()).limit(10).all()
                else:
                    applications = Application.query.order_by(Application.created_at.desc()).limit(10).all()
                
                if not applications:
                    await query.edit_message_text('üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫')
                    return
                
                for app_item in applications:
                    message = self.format_application_message(app_item)
                    
                    keyboard = []
                    if app_item.status == 'new':
                        keyboard.append([InlineKeyboardButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data=f'processed_{app_item.id}')])
                    
                    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=message,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                
                status_text = f"üìã {'–ù–æ–≤—ã–µ' if status == 'new' else '–í—Å–µ'} –∑–∞—è–≤–∫–∏: {len(applications)}"
                await query.edit_message_text(status_text)
                
        except Exception as e:
            logger.error(f"Error listing applications: {e}")
            await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫')
    
    def format_application_message(self, application):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
        status_emoji = "üÜï" if application.status == 'new' else "‚úÖ"
        status_text = "–ù–æ–≤–∞—è" if application.status == 'new' else "–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
        
        return f"""
<b>{status_emoji} –ó–∞—è–≤–∫–∞ #{application.id}</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìù <b>–ò–º—è:</b> {application.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {application.phone}
üìß <b>Email:</b> {application.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üõ† <b>–£—Å–ª—É–≥–∞:</b> {application.service_type or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {application.message or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÖ <b>–î–∞—Ç–∞:</b> {application.created_at.strftime('%d.%m.%Y %H:%M')}
üÜî <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
        """
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        data = query.data
        
        try:
            if data.startswith('processed_'):
                app_id = data.split('_')[1]
                await self.process_application(query, app_id)
            elif data == 'new':
                await self.list_applications(update, context, status='new')
            elif data == 'all':
                await self.list_applications(update, context)
            elif data == 'stats':
                await self.stats_command(update, context)
        except Exception as e:
            logger.error(f"Error in button handler: {e}")
            await query.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    
    async def process_application(self, query, app_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏"""
        try:
            from app import create_app
            from app.models import Application, db
            
            app = create_app()
            with app.app_context():
                application = Application.query.get(app_id)
                if application:
                    application.status = 'processed'
                    db.session.commit()
                    await query.answer('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è')
                    await query.edit_message_reply_markup(reply_markup=None)
                else:
                    await query.answer('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        except Exception as e:
            logger.error(f"Error processing application: {e}")
            await query.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if str(update.effective_chat.id) != ADMIN_CHAT_ID:
            await update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
            return
        
        await update.message.reply_text(
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏'
        )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.application = Application.builder().token(TOKEN).build()
            self.setup_handlers()
            
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            self.application.run_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramBotHelper()
    bot.run()

if __name__ == '__main__':
    main()