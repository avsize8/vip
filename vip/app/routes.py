from flask import render_template, request, redirect, session, url_for, flash
from .models import get_db_connection, can_submit_application
import os
import smtplib
from email.mime.text import MIMEText
import requests
from datetime import datetime

def send_email(app, subject, body, to_email):
    if not all([app.config['MAIL_SERVER'], app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD']]):
        app.logger.warning("Email configuration is incomplete. Skipping email sending.")
        return False
    
    try:
        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = app.config['MAIL_USERNAME']
        msg['To'] = to_email
        
        with smtplib.SMTP(app.config['MAIL_SERVER'], app.config['MAIL_PORT']) as server:
            if app.config['MAIL_USE_TLS']:
                server.starttls()
            server.login(app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD'])
            server.send_message(msg)
        return True
    except Exception as e:
        app.logger.error(f"Error sending email: {e}")
        return False

def send_telegram_notification(app, message):
    if not all([app.config['TELEGRAM_BOT_TOKEN'], app.config['TELEGRAM_CHAT_ID']]):
        app.logger.warning("Telegram configuration is incomplete. Skipping notification.")
        return False
    
    try:
        url = f"https://api.telegram.org/bot{app.config['TELEGRAM_BOT_TOKEN']}/sendMessage"
        payload = {
            'chat_id': app.config['TELEGRAM_CHAT_ID'],
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, json=payload)
        return response.status_code == 200
    except Exception as e:
        app.logger.error(f"Error sending Telegram notification: {e}")
        return False

def init_app(app):
    @app.route('/')
    def index():
        db = get_db_connection(app)
        featured_articles = db.execute('SELECT * FROM articles WHERE is_featured = 1 ORDER BY created_at DESC LIMIT 3').fetchall()
        team_members = db.execute('SELECT * FROM team_members WHERE is_active = 1 LIMIT 4').fetchall()
        db.close()
        return render_template('index.html', featured_articles=featured_articles, team_members=team_members)

    @app.route('/about')
    def about():
        db = get_db_connection(app)
        team_members = db.execute('SELECT * FROM team_members WHERE is_active = 1').fetchall()
        stats = {
            'cases': 250,
            'clients': 500,
            'years': 15,
            'awards': 12
        }
        db.close()
        return render_template('about.html', team_members=team_members, stats=stats)

    @app.route('/services')
    def services():
        services_list = [
            {
                'id': 'bankruptcy',
                'title': '–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ',
                'icon': 'balance-scale',
                'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü.',
                'details': '–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞, –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Å—É–¥–µ.'
            },
            {
                'id': 'real-estate',
                'title': '–°–ø–æ—Ä—ã –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                'icon': 'home',
                'description': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤.',
                'details': '–ü–æ–º–æ–≥–∞–µ–º —Ä–µ—à–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é, –≤–∫–ª—é—á–∞—è —Å–ø–æ—Ä—ã –æ –ø—Ä–∞–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞.'
            },
            {
                'id': 'administrative',
                'title': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã',
                'icon': 'gavel',
                'description': '–ó–∞—â–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Å–ø–æ—Ä–∞—Ö —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏.',
                'details': '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª–∞—Ö –∏ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤.'
            },
            {
                'id': 'tax',
                'title': '–ù–∞–ª–æ–≥–æ–≤—ã–µ —Å–ø–æ—Ä—ã',
                'icon': 'calculator',
                'description': '–ü–æ–º–æ—â—å –≤ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–ø–æ—Ä–∞—Ö –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è.',
                'details': '–ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.'
            },
            {
                'id': 'corporate',
                'title': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ',
                'icon': 'building',
                'description': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã.',
                'details': '–ü–æ–º–æ—â—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö, –≤–∫–ª—é—á–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.'
            },
            {
                'id': 'family',
                'title': '–°–µ–º–µ–π–Ω—ã–µ —Å–ø–æ—Ä—ã',
                'icon': 'heart',
                'description': '–†–µ—à–µ–Ω–∏–µ —Å–µ–º–µ–π–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.',
                'details': '–ü–æ–º–æ—â—å –≤ —Å–µ–º–µ–π–Ω—ã—Ö –¥–µ–ª–∞—Ö, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞, —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ—Ç–µ–π.'
            }
        ]
        return render_template('services.html', services=services_list)

    @app.route('/contacts', methods=['GET', 'POST'])
    def contacts():
        if request.method == 'POST':
            name = request.form.get('name')
            phone = request.form.get('phone')
            email = request.form.get('email')
            service_type = request.form.get('service_type')
            message = request.form.get('message')
            ip_address = request.remote_addr
            
            if not name or not phone:
                flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)', 'danger')
                return redirect(url_for('contacts'))
            
            if not can_submit_application(app, phone, ip_address):
                flash(f'–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ {app.config["SUBMISSION_LIMIT_MINUTES"]} –º–∏–Ω—É—Ç.', 'warning')
                return redirect(url_for('contacts'))
            
            try:
                os.makedirs(os.path.dirname(app.config['DATABASE']), exist_ok=True)
                db = get_db_connection(app)
                cursor = db.cursor()
                
                cursor.execute('''
                    INSERT INTO applications (name, phone, email, service_type, message, ip_address)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (name, phone, email, service_type, message, ip_address))
                db.commit()
                
                app_id = cursor.lastrowid
                
                if app.config['ADMIN_EMAIL']:
                    email_body = f'''
                    –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}:
                    –ò–º—è: {name}
                    –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
                    Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
                    –£—Å–ª—É–≥–∞: {service_type or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                    –°–æ–æ–±—â–µ–Ω–∏–µ: {message or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    IP: {ip_address}
                    –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                    '''
                    send_email(app, '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', email_body, app.config['ADMIN_EMAIL'])
                
                telegram_msg = f"""
<b>üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>üìù –ò–º—è:</b> {name}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
<b>üìß Email:</b> {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>üõ† –£—Å–ª—É–≥–∞:</b> {service_type or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
<b>üìã –°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>üåê IP:</b> {ip_address}
<b>üìÖ –î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
                """
                send_telegram_notification(app, telegram_msg)
                
                flash('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!', 'success')
                
            except Exception as e:
                db.rollback()
                flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.', 'danger')
                app.logger.error(f"Error in contacts: {e}")
                
            finally:
                db.close()
            
            return redirect(url_for('contacts'))
        
        return render_template('contacts.html')

    @app.route('/blog')
    def blog():
        db = get_db_connection(app)
        articles = db.execute('SELECT * FROM articles ORDER BY created_at DESC').fetchall()
        db.close()
        return render_template('blog.html', articles=articles)

    @app.route('/article/<int:article_id>')
    def article(article_id):
        db = get_db_connection(app)
        article = db.execute('SELECT * FROM articles WHERE id = ?', (article_id,)).fetchone()
        if not article:
            db.close()
            flash('–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'danger')
            return redirect(url_for('blog'))
        
        related_articles = db.execute('SELECT * FROM articles WHERE id != ? ORDER BY RANDOM() LIMIT 3', (article_id,)).fetchall()
        db.close()
        return render_template('article.html', article=article, related_articles=related_articles)

    @app.route('/admin')
    def admin_dashboard():
        if not session.get('admin_logged_in'):
            return redirect(url_for('admin_login'))
        
        db = get_db_connection(app)
        stats = {
            'total': db.execute('SELECT COUNT(*) FROM applications').fetchone()[0],
            'new': db.execute('SELECT COUNT(*) FROM applications WHERE status = "new"').fetchone()[0],
            'processed': db.execute('SELECT COUNT(*) FROM applications WHERE status = "processed"').fetchone()[0]
        }
        applications = db.execute('SELECT * FROM applications ORDER BY created_at DESC LIMIT 10').fetchall()
        db.close()
        return render_template('dashboard.html', stats=stats, applications=applications)

    @app.route('/admin/login', methods=['GET', 'POST'])
    def admin_login():
        if request.method == 'POST':
            if (request.form.get('username') == os.getenv('ADMIN_USERNAME') and 
                request.form.get('password') == os.getenv('ADMIN_PASSWORD')):
                session['admin_logged_in'] = True
                return redirect(url_for('admin_dashboard'))
            flash('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'danger')
        return render_template('admin_login.html')

    @app.route('/admin/logout')
    def admin_logout():
        session.pop('admin_logged_in', None)
        return redirect(url_for('admin_login'))

    @app.route('/admin/application/<int:app_id>')
    def view_application(app_id):
        if not session.get('admin_logged_in'):
            return redirect(url_for('admin_login'))
        
        db = get_db_connection(app)
        application = db.execute('SELECT * FROM applications WHERE id = ?', (app_id,)).fetchone()
        db.close()
        
        if not application:
            flash('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'danger')
            return redirect(url_for('admin_dashboard'))
        
        return render_template('view_application.html', application=application)

    @app.route('/admin/application/<int:app_id>/process')
    def process_application(app_id):
        if not session.get('admin_logged_in'):
            return redirect(url_for('admin_login'))
        
        db = get_db_connection(app)
        db.execute('UPDATE applications SET status = "processed" WHERE id = ?', (app_id,))
        db.commit()
        db.close()
        flash('–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', 'success')
        return redirect(url_for('view_application', app_id=app_id))